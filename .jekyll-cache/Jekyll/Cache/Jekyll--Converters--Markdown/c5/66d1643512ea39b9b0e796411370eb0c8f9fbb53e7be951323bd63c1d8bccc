I" <p><code class="language-plaintext highlighter-rouge">setState</code>는 함수형 컴포넌트 내에서 상태를 관리하게 위해 사용하는 <code class="language-plaintext highlighter-rouge">useState</code>를 통해 반환되는 함수입니다.</p>

<p>기본적으로 <code class="language-plaintext highlighter-rouge">setState</code>의 인자값에 변경하고자 하는 상태를 전달하여, 상태를 변경할 수 있습니다.</p>

<p>이 글에서는 <code class="language-plaintext highlighter-rouge">setState</code> 함수의 특징과 올바르게 사용하지 않았을 때 발생할 수 있는 오류에 대해서 알아보겠습니다.</p>

<p><br /></p>

<h2 id="setstate의-특징">setState의 특징</h2>

<p><code class="language-plaintext highlighter-rouge">setState</code> 함수는 다음 4가지 특징을 가지고 있습니다.</p>

<ul>
  <li>
    <p>비동기적으로 동작한다.</p>
  </li>
  <li>
    <p>연속적으로 호출하면 batch 처리를 한다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">setState</code>에 <code class="language-plaintext highlighter-rouge">state</code> 객체 뿐 아니라, 새로운 <code class="language-plaintext highlighter-rouge">state</code>를 반환하는 함수를 인자로 넘겨줄 수 있다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">state</code>는 객체이다.</p>
  </li>
</ul>

<p>다음으로 이러한 특징을 고려하지 않고 코딩할 때 발생할 수 있는 문제 예시에 대해서 살펴보겠습니다.</p>

<p><br /></p>

<h2 id="코드-예시">코드 예시</h2>

<p><code class="language-plaintext highlighter-rouge">useState</code>를 사용해서 number의 상태를 변경시키는 예시입니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">const</span> <span class="p">[</span><span class="nx">number</span><span class="p">,</span> <span class="nx">setNumber</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setNumber</span><span class="p">(</span><span class="nx">number</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">subtract</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setNumber</span><span class="p">(</span><span class="nx">number</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">multiplyBy2</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setNumber</span><span class="p">(</span><span class="nx">number</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">multiplyBy2AndAddBy1</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">multiplyBy2</span><span class="p">();</span>
  <span class="nx">add</span><span class="p">();</span>
<span class="p">};</span>

</code></pre></div></div>

<p>이 때 <code class="language-plaintext highlighter-rouge">multiplyBy2AndAddBy1</code> 함수를 실행시키면, <code class="language-plaintext highlighter-rouge">multiplyBy2</code> 후에 <code class="language-plaintext highlighter-rouge">add</code>가 실행되는 것이 아니라, 의도한 바와 달리 <code class="language-plaintext highlighter-rouge">add</code>만 실행이 됩니다.</p>

<p>이런 현상이 일어나는 이유는 무엇일까요?</p>

<p><br /></p>

<h2 id="문제의-원인">문제의 원인</h2>

<p><code class="language-plaintext highlighter-rouge">react</code>에서 여러 <code class="language-plaintext highlighter-rouge">setState</code> 호출을 만나면, 각 <code class="language-plaintext highlighter-rouge">setState</code>에 전달된 객체를 모두 추출한 후 <strong>merge</strong>하여 단일 객체로 만듭니다.</p>

<p>이후 단일 객체를 사용하여 <code class="language-plaintext highlighter-rouge">setState</code>를 수행합니다.</p>

<p>다음 예시코드를 통해 객체가 어떻게 <strong>merge</strong>되는지 살펴보겠습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">const</span> <span class="nx">singleObject</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span>
  <span class="p">{},</span>
  <span class="nx">objectFromSetState1</span><span class="p">,</span>
  <span class="nx">objectFromSetState2</span><span class="p">,</span>
  <span class="nx">objectFromSetState3</span>
<span class="p">);</span>

</code></pre></div></div>

<p>이 때 3개의 객체가 동일한 키를 가지고 있다면, <code class="language-plaintext highlighter-rouge">Object.assign</code>에 마지막으로 전달된 객체(<code class="language-plaintext highlighter-rouge">objectFromSetState3</code>)의 키의 값만 적용됩니다.</p>

<p><br /></p>

<h2 id="해결방법">해결방법</h2>

<p>이 문제를 해결하기 위해서는 <code class="language-plaintext highlighter-rouge">setState</code> 함수에 새로운 <code class="language-plaintext highlighter-rouge">state</code>를 반환하는 함수를 인자로 전달하면 됩니다.</p>

<p>이렇게 하면 인자로 넘겨 받는 함수들은 <strong>Queue</strong>에 저장되어 순서대로 실행되게 됩니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">const</span> <span class="p">[</span><span class="nx">number</span><span class="p">,</span> <span class="nx">setNumber</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setNumber</span><span class="p">(</span><span class="nx">number</span> <span class="o">=&gt;</span> <span class="nx">number</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">subtract</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setNumber</span><span class="p">(</span><span class="nx">number</span> <span class="o">=&gt;</span> <span class="nx">number</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">multiplyBy2</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setNumber</span><span class="p">(</span><span class="nx">number</span> <span class="o">=&gt;</span> <span class="nx">number</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">multiplyBy2AndAddBy1</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">multiplyBy2</span><span class="p">();</span>
  <span class="nx">add</span><span class="p">();</span>
<span class="p">};</span>

</code></pre></div></div>

<h2 id="참고자료">참고자료</h2>

<p>[1] <a href="https://usecode.pw/functional-set-state-is-the-future-of-react/">함수형 setState가 리액트의 미래이다</a></p>

<p>[2] <a href="https://leehwarang.github.io/2020/07/28/setState.html">React의 setState() 제대로 사용하기(Blog)</a></p>

<p>[3] <a href="https://www.youtube.com/watch?v=hSdVDBPTT0U&amp;t=14s">리액트의 setState() 제대로 사용하기(Youtube)</a></p>
:ET